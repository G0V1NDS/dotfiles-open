#!/bin/bash
# Syncs bitwarden passwords with KeePassXC data
# Requires bitwarden-cli
# example usage: syncpass $HOME/passdb.kdbx $HOME/secret.txt

blue=$(tput setaf 4)
red=$(tput setaf 1)
white=$(tput setaf 7)
tmp_dir=$(mktemp -d -t bw-XXXXXXXXXX)

check_dependencies() {
    if ! command -v bw &> /dev/null; then
        echo -e "${red}Error: 'bw' command not found. Make sure BitWarden CLI is installed and accessible.${white}"
        exit 1
    fi

    if ! command -v fd &> /dev/null; then
        echo -e "${red}Error: 'fd' command not found. Make sure fd is installed and accessible.${white}"
        exit 1
    fi

    if ! command -v fzf &> /dev/null; then
        echo -e "${red}Error: 'fzf' command not found. Make sure fzf is installed and accessible.${white}"
        exit 1
    fi

    if ! command -v keepassxc-cli &> /dev/null; then
        echo -e "${red}Error: 'keepassxc-cli' command not found. Make sure KeePassXC is installed.${white}"
        exit 1
    fi

    if ! command -v pimport &> /dev/null; then
        echo -e "${red}Error: 'pimport' command not found. Make sure the 'pass-import' package is installed.${white}"
        exit 1
    fi

    if ! python3 -c "import certifi" 2>/dev/null; then
        echo -e "${red}Error: The 'certifi' package is missing. Please install it using 'pip3 install certifi'.${white}"
        exit 1
    fi
}

find_file_in_directory() {
    local search_dir="$1"
    local prompt="$2"
    local regex="$3"
    local selected_file

    # Search for files with the specified prefix and suffix in the directory and its subdirectories
    local files
    files=$(fd --type f --type l --max-depth 5 "${regex}" "$search_dir" | sort -r)

    if [ -z "$files" ]; then
        echo -e "${red}Error: No files with the regex '${regex}' found in '$search_dir' or its subdirectories.${white}"
        exit 1
    fi

    # Use fzf to let the user choose from the list of files
    selected_file=$(echo "$files" | fzf --prompt "$prompt")
    if [ -z "$selected_file" ]; then
        echo -e "${red}No file selected. Exiting.${white}"
        exit 1
    fi

    echo "$selected_file"
}

find_keepass_db() {
    # Use the generic method to search for KeePassXC database files with 'kdbx' extension
    find_file_in_directory "$PWD" "Select KeePass database file: " ".*kdbx"
}

find_keepass_secret() {
    # Use the generic method to search for KeePassXC database secret key with 'key' extension
    find_file_in_directory "$HOME/.ssh" "Select KeePass database secret key: " ""
}

cleanup() {
    echo -e "\n\n${blue}Removing decrypted sensitive data${white}"
    # Securely delete the file once it is restored in KeePass
    # https://www.howtogeek.com/425232/how-to-securely-delete-files-on-linux/
    rm -rf "${tmp_dir}"
}

# Use trap to call the cleanup function when the script exits
trap cleanup EXIT

# Check for dependencies
check_dependencies

decrypted_bw_backup=$tmp_dir/bw.json
keepass_db=$(find_keepass_db)
keepass_db_secret=$(find_keepass_secret)
echo -e "${blue}Starting keepass-bitwarden sync${white}"

# Creating temp directory to store dump file
# Importing bitwarden JSON dump
# As per ongoing bug bitwarden-cli can't export non-interactively, https://github.com/bitwarden/cli/issues/200
read -rp "Bitwarden Email: " bw_email
echo -e -n "\n\n${blue}Bitwarden Password: ${white}";
read -s password
echo -e "\n\n${blue}Wait while latest bitwarden dump is fetched...${white}"
printf '%s\n%s\n' "$password" "$password" | bw login "$bw_email" "$password"
printf '%s\n%s\n' "$password" "$password" | bw sync "$password"
printf '%s\n%s\n' "$password" "$password" | bw export "$password" --format json --output "$decrypted_bw_backup"
bw logout

if [[ ! -f "$decrypted_bw_backup" ]]; then
    echo -e "\n\n${red}No backup dump created, Exiting...${white}\n\n"
    exit 1
fi

# Exporting the dump to keepass, while making a backup of existing db
echo -e -n "\n${blue}KeePass Password: ${white}"
read -rs password
if [[ -f "${keepass_db}" ]]; then
    echo -e "\n\n${blue}Backing up existing db${white}\n\n"
    mv "${keepass_db}" "${keepass_db}.bak"
fi

echo -e "\n\n${blue}Creating new KeePass DB${white}\n\n"
printf '%s\n%s\n' "$password" "$password" | keepassxc-cli db-create -p --set-key-file "${keepass_db_secret}" "${keepass_db}"


echo -e "\n\n${blue}Importing bitwarden dump to newly created keepass db${white}\n\n"
echo -e -n "\n\n${blue}KeePass Password again: ${white}\n\n";
pimport -af -vvv keepassxc bitwarden "$decrypted_bw_backup" --out "${keepass_db}" -k "${keepass_db_secret}"
