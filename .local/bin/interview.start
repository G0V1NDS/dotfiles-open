#!/usr/bin/env bash
# This script takes candidate name as input and
# creates a new google doc to be shared with the candidate for live coding round/LLD/HLD round.
# It creates a local note file also in name of candidate, this can be used to take notes.
# Collective summary from these notes can be submitted to recruiter flow
#
# This script expects two template files in current directory:
# 1. questions-template.md -> this contains the questions you ask the candidate
# 2. feedback-template.md -> this contains the feedback template
#
# Note file is combination of both these templates.
#
# If you want all the google docs to be put in a common directory in google drive,
# you can create a folder in drive and get the folder id
# Check this to obtain Id of a drive folder: https://ploi.io/documentation/database/where-do-i-get-google-drive-folder-id#:~:text=Getting%20this%20folder%20ID%20is,be%20put%20in%20that%20folder.
#
# Give sufficient permission to the script using below command:
# chmod +x interview.start
#
# Usage: ./interview.start "Govind Singh"

current_date=$(date +%Y-%m-%d)
candidate_name="${1}"
unique_doc_name="${current_date}: Interview with ${candidate_name}"

validate_env_variables() {
        local missing_vars=()

        if [[ -z "${NEORG_DIR_INTERVIEWS}" ]]; then
                missing_vars+=("NEORG_DIR_INTERVIEWS")
        fi

        if [[ -z "${GDRIVE_INTERVIEW_FOLDER_ID}" ]]; then
                missing_vars+=("GDRIVE_INTERVIEW_FOLDER_ID")
        fi

        if [[ ${#missing_vars[@]} -gt 0 ]]; then
                echo "Error: The following environment variable(s) are not set: ${missing_vars[*]}" >&2
                exit 1
        fi
}

# Function to encode URL
urlencode() {
        python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" "${1}"
}

# Function to create Google Doc
create_google_doc() {
        local folder_id="${GDRIVE_INTERVIEW_FOLDER_ID}" # Interview folder id on Google Drive
        local google_doc_base_url="https://docs.google.com/document"
        local urlencoded_doc_title=$(urlencode "${unique_doc_name}")

        local doc_url="${google_doc_base_url}/create?title=${urlencoded_doc_title}"

        if [[ "${folder_id}" ]]; then
                doc_url="${google_doc_base_url}/create?usp=drive_web&folder=${folder_id}&title=${urlencoded_doc_title}"
        fi

        echo "${doc_url}"
}

# Function to combine templates and create note file
create_note_file() {
        local template_directory="${NEORG_DIR_INTERVIEWS}/wiki"
        local new_note_file="${unique_doc_name}.md"
        # Excaped file path
        local new_note_file_escaped=$(printf '%q' "$new_note_file")

        if [[ ! -d "$template_directory" ]]; then
                echo -e "\nDirectory doesn't exist $template_directory" >&2
                exit 0
        fi
        echo -e "\nCreating new note file: ${template_directory}/${new_note_file}" >&2

        echo -e "# ${candidate_name}\n\n" >"${template_directory}/${new_note_file}"
        {
                cat "${template_directory}/questions-template.md"
                echo -e "\n\n"
                cat "${template_directory}/feedback-template.md"
        } >>"${template_directory}/${new_note_file}"

        # $EDITOR -u "${MYVIMRCLSP}" -c "norm Go" \
        #         -c "norm Go## ${current_date}" \
        #         -c "norm Go[${candidate_name}](${unique_doc_name})" \
        #         -c "norm zz" \
        #         "${new_note_file}"
        openterm --title "${unique_doc_name}" --shell "${SHELL}" --cmd-str "$EDITOR -u ${MYVIMRCLSP} ${template_directory}/${new_note_file_escaped}"
}

# Main script
main() {
        validate_env_variables

        # Create Google Doc
        create_google_doc
        # open "${doc_url}"

        # Create Note file
        create_note_file
}

# Check if candidate name is provided
if [[ -z "${candidate_name}" ]]; then
        echo "Usage: $0 <candidate_name>"
        exit 1
fi

main "$1"
