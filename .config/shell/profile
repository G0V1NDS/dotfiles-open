#!/bin/zsh

# profile file. Runs on login. Environmental variables are set here.

# If you don't plan on reverting to bash, you can remove the link in ~/.profile
# to clean up.

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"
#export XINITRC="${XDG_CONFIG_HOME:-$HOME/.config}/x11/xinitrc"
#export XAUTHORITY="$XDG_RUNTIME_DIR/Xauthority" # This line will break some DMs.

# Adds `~/.local/bin` to $PATH
export PATH="$PATH:$(du "$HOME/.local/bin" | cut -f2 | paste -sd ':' -)"
# Adds `NPM_CONFIG_PREFIX` to $PATH
export PATH="$PATH:${XDG_DATA_HOME}/npm/bin"
# Adds `CARGO_HOME` to $PATH
export PATH="$PATH:${XDG_DATA_HOME}/cargo/bin"
# Adds `GOPATH` to $PATH
export PATH="$PATH:${XDG_DATA_HOME}/go/bin"

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init --path)"
fi

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

export MACHINE=$machine

unsetopt PROMPT_SP

# Default programs:
export EDITOR="nvim"
export TERMINAL="st"
export BROWSER="firefox"

# ~/ Clean-up:
export NOTMUCH_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/notmuch-config"
export GTK2_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-2.0/gtkrc-2.0"
export LESSHISTFILE="-"
export WGETRC="${XDG_CONFIG_HOME:-$HOME/.config}/wget/wgetrc"
export INPUTRC="${XDG_CONFIG_HOME:-$HOME/.config}/shell/inputrc"
export EDITRC="${XDG_CONFIG_HOME:-$HOME/.config}/shell/editrc"
export ZDOTDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
#export ALSA_CONFIG_PATH="$XDG_CONFIG_HOME/alsa/asoundrc"
#export GNUPGHOME="${XDG_DATA_HOME:-$HOME/.local/share}/gnupg"
export WINEPREFIX="${XDG_DATA_HOME:-$HOME/.local/share}/wineprefixes/default"
export KODI_DATA="${XDG_DATA_HOME:-$HOME/.local/share}/kodi"
export PASSWORD_STORE_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/password-store"
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
export ANDROID_SDK_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/android"
export CARGO_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/cargo"
export GOPATH="${XDG_DATA_HOME:-$HOME/.local/share}/go"
export ANSIBLE_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/ansible/ansible.cfg"
export UNISON="${XDG_DATA_HOME:-$HOME/.local/share}/unison"
export HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/history"
export WEECHAT_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/weechat"
export GIT_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/git"
export AWS_SHARED_CREDENTIALS_FILE="${XDG_CONFIG_HOME}/aws/credentials"
export AWS_CONFIG_FILE="${XDG_CONFIG_HOME}/aws/config"
export GNUPGHOME="${XDG_CONFIG_HOME}/gnupg"
export PYTHONSTARTUP="${XDG_CONFIG_HOME}/python/pythonstartup.py"
export IPYTHONDIR="${XDG_CONFIG_HOME}/python/ipython"
export PYLINTHOME="${XDG_CACHE_HOME}/pylint"
export PYTHONHISTORY="${XDG_DATA_HOME}/python"
export RIPGREP_CONFIG_PATH="${XDG_CONFIG_HOME}/.ripgreprc"
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}/npm/npmrc"
# export NPM_CONFIG_PREFIX="${XDG_DATA_HOME}/npm" # NVM doesn't support it
export NODE_REPL_HISTORY="${XDG_DATA_HOME}/node_repl_history"
export npm_config_devdir="${XDG_CACHE_HOME}/node-gyp" # For node-gyp
export RUSTUP_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/rustup"
export MYVIMRC="${XDG_CONFIG_HOME:-$HOME/.config}/nvim/init.vim"
export MYVIMRCLSP="${XDG_CONFIG_HOME:-$HOME/.config}/nvim/initlsp.vim"
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
export MBSYNCRC="${XDG_CONFIG_HOME:-$HOME/.config}/isync/mbsyncrc"
export SVDIR="/run/runit/service"

# Clipmenu
export CM_DEBUG=1
export CM_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/clipmenu"
export CM_MAX_CLIPS=200
export CM_SELECTIONS="clipboard primary"
export CM_IGNORE_WINDOW="dmenu"

# VimWiki
export VIMWIKI_DIR="$HOME/Dropbox/vimWiki"
export VIMWIKI_DIR_PERSONAL="${VIMWIKI_DIR}/Personal"
export VIMWIKI_DIR_WORK="${VIMWIKI_DIR}/Work"

# Taskwarrior
export TASKRC="$HOME/.config/taskwarrior/task/taskrc"
export TASKDATA="$HOME/Dropbox/taskwarrior"
export BUGWARRIORRC="$HOME/.config/taskwarrior/bugwarrior/bugwarriorrc"
export TIMEWARRIORDB="$HOME/Dropbox/timewarrior"


# Other program settings:
export DICS="/usr/share/stardict/dic/"
export SUDO_ASKPASS="$HOME/.local/bin/dmenupass"
export FZF_DEFAULT_OPTS="--layout=reverse --height 40%  --inline-info"
export FZF_DEFAULT_COMMAND='fd --hidden --follow --type f'


# export LESS=-R
export LESS="-XFR"
export LESS_TERMCAP_mb="$(printf '%b' '[1;31m')"
export LESS_TERMCAP_md="$(printf '%b' '[1;36m')"
export LESS_TERMCAP_me="$(printf '%b' '[0m')"
export LESS_TERMCAP_so="$(printf '%b' '[01;44;33m')"
export LESS_TERMCAP_se="$(printf '%b' '[0m')"
export LESS_TERMCAP_us="$(printf '%b' '[1;32m')"
export LESS_TERMCAP_ue="$(printf '%b' '[0m')"
export LESSOPEN="| /usr/bin/highlight -O ansi %s 2>/dev/null"
export QT_QPA_PLATFORMTHEME="gtk2"	# Have QT use gtk2 theme.
export MOZ_USE_XINPUT2="1"		# Mozilla smooth scrolling/touchpads.
export AWT_TOOLKIT="MToolkit wmname LG3D"	#May have to install wmname
export _JAVA_AWT_WM_NONREPARENTING=1	# Fix for Java applications in dwm

# This is the list for lf icons:
export LF_ICONS="di=📁:\
fi=📃:\
tw=🤝:\
ow=📂:\
ln=⛓:\
or=❌:\
ex=🎯:\
*.txt=✍:\
*.mom=✍:\
*.me=✍:\
*.ms=✍:\
*.png=🖼:\
*.webp=🖼:\
*.ico=🖼:\
*.jpg=📸:\
*.jpe=📸:\
*.jpeg=📸:\
*.gif=🖼:\
*.svg=🗺:\
*.tif=🖼:\
*.tiff=🖼:\
*.xcf=🖌:\
*.html=🌎:\
*.xml=📰:\
*.gpg=🔒:\
*.css=🎨:\
*.pdf=📚:\
*.djvu=📚:\
*.epub=📚:\
*.csv=📓:\
*.xlsx=📓:\
*.tex=📜:\
*.md=📘:\
*.r=📊:\
*.R=📊:\
*.rmd=📊:\
*.Rmd=📊:\
*.m=📊:\
*.mp3=🎵:\
*.opus=🎵:\
*.ogg=🎵:\
*.m4a=🎵:\
*.flac=🎼:\
*.wav=🎼:\
*.mkv=🎥:\
*.mp4=🎥:\
*.webm=🎥:\
*.mpeg=🎥:\
*.avi=🎥:\
*.mov=🎥:\
*.mpg=🎥:\
*.wmv=🎥:\
*.m4b=🎥:\
*.flv=🎥:\
*.zip=📦:\
*.rar=📦:\
*.7z=📦:\
*.tar.gz=📦:\
*.z64=🎮:\
*.v64=🎮:\
*.n64=🎮:\
*.gba=🎮:\
*.nes=🎮:\
*.gdi=🎮:\
*.1=ℹ:\
*.nfo=ℹ:\
*.info=ℹ:\
*.log=📙:\
*.iso=📀:\
*.img=📀:\
*.bib=🎓:\
*.ged=👪:\
*.part=💔:\
*.torrent=🔽:\
*.jar=♨:\
*.java=♨:\
"

if [[ ${machine} == "Linux" ]]; then
	if $(pacman -Qs libxft-bgra >/dev/null 2>&1); then
		# Start graphical server on user's current tty if not already running.
		[ "$(tty)" = "/dev/tty1" ] && ! pidof -s Xorg >/dev/null 2>&1 && exec startx
	else
		echo "\033[31mIMPORTANT\033[0m: Note that \033[32m\`libxft-bgra\`\033[0m must be installed for this build of dwm.
	Please run:
		\033[32myay -S libxft-bgra-git\033[0m
	and replace \`libxft\`. Afterwards, you may start the graphical server by running \`startx\`."
	fi

	# Switch escape and caps if tty and no passwd required:
	sudo -n loadkeys ${XDG_DATA_HOME:-$HOME/.local/share}/larbs/ttymaps.kmap 2>/dev/null
	. "$HOME/.local/share/cargo/env"
fi

if [[ ${machine} == "Mac" ]]; then
    export CARGO_HOME="$HOME/.cargo"
    export PATH="$PATH:${CARGO_HOME}/bin"
	. "$HOME/.cargo/env"
    export HOMEBREW_NO_AUTO_UPDATE=1
	if ! $(command -v brew 1>/dev/null 2>&1); then
		  eval "$(/opt/homebrew/bin/brew shellenv)"
	fi
fi

[ ! -f ${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc ] && shortcuts >/dev/null 2>&1 &
