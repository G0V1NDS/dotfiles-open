#!/bin/bash

# sudo() {
    # Enables touch id for sudo on mac
    # unset -f sudo
    # if [[ "$(uname)" == 'Darwin' ]] && ! grep 'pam_tid.so' /etc/pam.d/sudo --silent; then
      # sudo sed -i -e '1s;^;auth       sufficient     pam_tid.so\n;' /etc/pam.d/sudo
    # fi
    # sudo "$@"
# }

# Add global functions here
function docker_ip() {
    container_name=$1
    docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container_name
}


function is_docker_container_running() {
    container_name=$1
    if [[ $(docker ps -f "name=$container_name" --format '{{.Names}}') == $container_name ]]; then
        true
    else
        false
    fi
}


function docker_start_service() {
    compose_file="$1"
    service_name="$2"
    compose_file_dir=$(basename $(dirname "${compose_file}"))
    container_name="${compose_file_dir}-${service_name}-1"
    if is_docker_container_running $container_name ; then
        echo -e "Container ${container_name} is already running"
    else
        echo -e "Starting container ${container_name}..."
        docker-compose -f "$compose_file"  up -d "$service_name"
    fi
}

function switch_iterm2_profile() {
    # Iterm allows switching profile with this escape sequence
    echo -ne "\033]50;SetProfile=$1\a"
}

get_pr_url() {
    raise=$1

    # Gets pull request URL for selected destination branch from current branch
    inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
    # Return if not a git repository
    if ! [ "$inside_git_repo" ]; then
      echo "Not in git repo"
      return
    fi

    # Choosing destination branch from available top branch choices
    # Instruct if main brances are not defined, and consider all recently used local branches
    if ! [[ $(git config --get core.mainbranches) ]]; then
        echo "Main branches are not defined in local git config"
        echo -e "Define them using below command, in this sample adding stage and master as two main branches\n"
        echo '```\ngit config --replace-all core.mainbranches "stage\\nmaster"\n\n```'

        echo "\n\nConsidering all recently used local branches by default\n\n"
        dest_branch="$(git branch --color=always --sort=-committerdate | grep -v '/HEAD\\s'  | fzf --ansi | sed 's/^..//' | awk '{print $1}' | sed "s#^remotes/[^/]*/##")"
    else
        dest_branch="$(echo -e $(git config --get core.mainbranches) | fzf)"
    fi

    # Getting repo path from configured origin remote
    repo_push_url=$(git remote get-url --push origin)

    # Getting repo path based on URL type, logic will vary if repo ssh or http
    if [[ $repo_push_url == "https://"* ]]; then
        repo_path=$(echo $repo_push_url | cut -d "/" -f4- | cut -d "." -f1)
    else
        repo_path=$(echo $repo_push_url | cut -d ":" -f2 | cut -d "." -f1)
    fi

    # Using current branch as source branch
    source_branch=$(git rev-parse --abbrev-ref HEAD)

    echo -e "\nRepo Path: ${repo_path}\nSource branch: ${source_branch}\nDestination branch: ${dest_branch}\n\n"
    if [[ $repo_push_url == *bitbucket* ]]; then
        pr_url="https://bitbucket.org/${repo_path}/pull-requests/new?source=${source_branch}&dest=${dest_branch}"
    elif [[ $repo_push_url == *gitlab* ]]; then
        pr_url="https://gitlab.com/${repo_path}/merge_requests/new?merge_request%5Bsource_branch%5D=${source_branch}&merge_request%5Btarget_branch%5D=${dest_branch}"
    elif [[ $repo_push_url == *github* ]]; then
        pr_url="https://github.com/${repo_path}/compare/${dest_branch}...${source_branch}"
    fi

    echo "${pr_url}"

    if [[ $raise == "1" ]]; then
        # Raises pull request against selected destination branch from current branch
        open "${pr_url}"
    fi
}

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions-private" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions-private"
