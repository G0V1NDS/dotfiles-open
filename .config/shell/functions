#!/bin/bash

# sudo() {
    # Enables touch id for sudo on mac
    # unset -f sudo
    # if [[ "$(uname)" == 'Darwin' ]] && ! grep 'pam_tid.so' /etc/pam.d/sudo --silent; then
      # sudo sed -i -e '1s;^;auth       sufficient     pam_tid.so\n;' /etc/pam.d/sudo
    # fi
    # sudo "$@"
# }

# Add global functions here
function docker_ip() {
    container_name=$1
    docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container_name
}


function is_docker_container_running() {
    container_name=$1
    if [[ $(docker ps -f "name=$container_name" --format '{{.Names}}') == $container_name ]]; then
        true
    else
        false
    fi
}


function docker_start_service() {
    compose_file="$1"
    service_name="$2"
    compose_file_dir=$(basename $(dirname "${compose_file}"))
    container_name="${compose_file_dir}-${service_name}-1"
    if is_docker_container_running $container_name ; then
        echo -e "Container ${container_name} is already running"
    else
        echo -e "Starting container ${container_name}..."
        docker-compose -f "$compose_file"  up -d "$service_name"
    fi
}

function switch_iterm2_profile() {
    # Iterm allows switching profile with this escape sequence
    echo -ne "\033]50;SetProfile=$1\a"
}

raise_pr() {
    raise=${1:=1}

    # Gets pull request URL for selected destination branch from current branch
    inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
    # Return if not a git repository
    if ! [ "$inside_git_repo" ]; then
      echo "Not in git repo"
      return
    fi

    # Choosing destination branch from available top branch choices
    # Instruct if main brances are not defined, and consider all recently used local branches

    main_branch_str=$(git config --get core.mainbranches)
    if ! [[ "${main_branch_str}" ]]; then
        echo "Main branches are not defined in local git config"
        echo -e "Define them using below command, in this sample adding stage and master as two main branches\n"
        echo '```\ngit config --replace-all core.mainbranches "stage\\nmaster"\n\n```'

        echo "\n\nConsidering all recently used local branches by default\n\n"
        dest_branch="$(git branch --color=always --sort=-committerdate | grep -v '/HEAD\\s'  | fzf --ansi | sed 's/^..//' | awk '{print $1}' | sed "s#^remotes/[^/]*/##")"
    else
        dest_branch="$(echo -e "${main_branch_str}" | fzf)"
    fi


    # Using current branch as source branch
    source_branch=$(git rev-parse --abbrev-ref HEAD)
    is_hotfix_branch=$(rg -i "FIX" <<< "${source_branch}")

    if [[ -z "${is_hotfix_branch}" ]]; then
        # Validating if all source branch commits are present in previous lower branch
        echo -e "\nValidating if all source branch commits are present in previous lower branch:\n" >&2

        check_lower_branch_missed_commits "${dest_branch}" "${main_branch_str}"
        # Returning on error
        if [ $? -ne 0 ]; then
           return
        fi
    fi

    echo -e "\nGetting repo URL..." >&2
    # Getting repo path from configured origin remote
    repo_push_url=$(git remote get-url --push origin)

    # Getting repo path based on URL type, logic will vary if repo ssh or http
    if [[ $repo_push_url == "https://"* ]]; then
        repo_path=$(echo $repo_push_url | cut -d "/" -f4- | cut -d "." -f1)
    else
        repo_path=$(echo $repo_push_url | cut -d ":" -f2 | cut -d "." -f1)
    fi

    echo -e "Repo Path: ${repo_path}\nSource branch: ${source_branch}\nDestination branch: ${dest_branch}\n\n"
    if [[ $repo_push_url == *bitbucket* ]]; then
        pr_url="https://bitbucket.org/${repo_path}/pull-requests/new?source=${source_branch}&dest=${dest_branch}"
    elif [[ $repo_push_url == *gitlab* ]]; then
        pr_url="https://gitlab.com/${repo_path}/merge_requests/new?merge_request%5Bsource_branch%5D=${source_branch}&merge_request%5Btarget_branch%5D=${dest_branch}"
    elif [[ $repo_push_url == *github* ]]; then
        pr_url="https://github.com/${repo_path}/compare/${dest_branch}...${source_branch}"
    fi

    echo "${pr_url}"

    if [[ $raise == "1" ]]; then
        # Raises pull request against selected destination branch from current branch
        open "${pr_url}"
    fi
}

function get_lower_branch(){
    # Lower branch: A branch lower in hierarchy then the target branch, which should have all the commits before moving to target branch
    destination_branch=$1
    shift
    main_branches=("$@")

    echo -e "main_branches: ${main_branches}" >&2
    echo -e "destination_branch: ${destination_branch}" >&2
    branch_position=-1


    count=0
    for branch in "${main_branches[@]}"; do
        if [[ "${branch}" = "${destination_branch}" ]]; then
            branch_position=${count}
            break
        fi
        count=$((count + 1))
    done

    local lower_branch
    if [[ $branch_position -ge 1 ]]; then
        lower_branch_position=$((${branch_position} - 1))

        # Zsh and bash compatible way to access list index by using offset:limit
        lower_branch=${main_branches[@]:$lower_branch_position:1}

        echo -e "lower_branch: ${lower_branch}" >&2
    else
        echo -e "This is the lowest main branch, no need to check missing commits for this." >&2
    fi

    echo "${lower_branch}"
}

function check_lower_branch_missed_commits(){
    # Check for missing commits in lower branch
    # Here lower branch refers to a branch lower in hierarchy then the target branch, which should have all the commits before moving to target branch
    dest_branch=$1
    main_branche_str=$2

    if [[ -z "${main_branche_str}" ]]; then
        main_branch_str=$(git config --get core.mainbranches)
    fi
    if [[ -z "${dest_branch}" ]]; then
        dest_branch=$(echo -e "${main_branch_str}" | fzf)
    fi

    main_branches=()
    while IFS= read -r branch; do main_branches+=("${branch}"); done <<< $(echo -e "${main_branch_str}")
    source_branch=$(git rev-parse --abbrev-ref HEAD)
    lower_branch=$(get_lower_branch "${dest_branch}" "${main_branches[@]}")

    if [ -z "${lower_branch}" ]; then
        echo -e "SUCCESS : No lower branch to compare with" >&2
    else
        echo -e "\nChecking branch logs..." >&2
        echo -e "\nFetching latest changes..." >&2
        git fetch -a
        echo -e "\ngit log origin/${lower_branch}..origin/${source_branch} --no-merges\n" >&2
        log_diff=$(git log origin/"${lower_branch}..origin/${source_branch}" --no-merges)
        log_cmd_return=$(echo "${log_diff}" | head -c1 | wc -c)
        if [ -n "${log_diff}" ] && [ "${log_cmd_return}" -ne 0 ]; then
            comment_msg="FAILED : the changes are not merged in [${lower_branch}]. Please merge your changes in [$lower_branch] before merging in [${dest_branch}]\n\n${log_diff}"
            echo -e "${comment_msg}" >&2

            return "${log_cmd_return}"
        else
            echo -e "SUCCESS : All the changes are merged in lower hierarchy branch" >&2
        fi
    fi
}
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions-private" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions-private"

function urldecode(){
    decoded_value=$(python3 -c "import sys, urllib.parse as ul; \
        print(ul.unquote_plus(sys.argv[1]))" $1)
    echo "${decoded_value}"
}

function urlencode(){
    encoded_value=$(python3 -c "import sys, urllib.parse as ul; \
        print (ul.quote_plus(sys.argv[1]))" $1)
    echo "${encoded_value}"
}
